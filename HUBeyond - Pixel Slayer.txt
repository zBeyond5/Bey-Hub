-- Feito e Open Source por zBeyond
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()
local AutoFarmEnabled = false
local AutoStatsEnabled = false
local AutoRebirthEnabled = false
local KillAuraEnabled = false
local HEIGHT_OFFSET = 15
local SelectedStat = "Power"
local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemotePath = ReplicatedStorage:WaitForChild("Universe"):WaitForChild("Network"):WaitForChild("Remotes")

local DAMAGE_AMOUNT = 50  -- Valor base do dano
local KILL_AURA_RANGE = 50  -- Aumentado para uma distância maior
local AUTO_FARM_RANGE = 100  -- Aumentado para uma área de farm mais ampla
local MAX_MOBS_TO_DAMAGE = 10  -- Aumento no número de mobs que podem ser atacados simultaneamente

-- Função para aplicar dano a todos os mobs ao redor
local function multiDamageAllMobs()
    local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")
    local mobCount = 0
    
    for _, mob in pairs(mobsFolder:GetChildren()) do
        if mob and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            mobCount = mobCount + 1
            if mobCount > MAX_MOBS_TO_DAMAGE then break end  -- Limitando o número de mobs a serem atingidos
            
            local args = {
                [1] = mob,
                [2] = DAMAGE_AMOUNT  -- Adicionando o valor do dano
            }
            for i = 1, 3 do
                game:GetService("ReplicatedStorage").Universe.Network.Remotes.DamageFire:FireServer(unpack(args))
            end
        end
    end
end

-- Função para checar se o mob está vivo
local function isMobAlive(mob)
    return mob and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0
end

-- Função que ativa o AutoStats
local function runAutoStats()
    spawn(function()
        while AutoStatsEnabled do
            local args = {}
            
            if SelectedStat == "Power" then
                args = { [1] = 1, [2] = 0, [3] = 0 }
            elseif SelectedStat == "Health" then
                args = { [1] = 0, [2] = 1, [3] = 0 }
            elseif SelectedStat == "Critical" then
                args = { [1] = 0, [2] = 0, [3] = 1 }
            end

            -- Verifica se o objeto de Remotes existe
            local upgradeStat = game:GetService("ReplicatedStorage"):WaitForChild("Universe"):WaitForChild("Network"):WaitForChild("Remotes"):WaitForChild("UpgradeStat")
            if upgradeStat then
                upgradeStat:FireServer(unpack(args))
            end
            
            wait(0.1)  -- Adiciona uma pausa para evitar uso excessivo de CPU
        end
    end)
end

-- Função que ativa o AutoRebirth
local function runAutoRebirth()
    spawn(function()
        while AutoRebirthEnabled do
            -- Verifica se o Remote está disponível antes de usar
            local rebirthRemote = game:GetService("ReplicatedStorage").Universe.Network.Remotes.Rebirth
            if rebirthRemote then
                rebirthRemote:FireServer()
            end
            wait(0.1)  -- Intervalo para não sobrecarregar
        end
    end)
end

-- Função que ativa o AutoFarm
local function AutoFarm()
    spawn(function()
        while AutoFarmEnabled do
            local character = game.Players.LocalPlayer.Character
            if not character then continue end
            
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if not humanoidRootPart then continue end
            
            local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")
            local mobFound = false
            
            for _, mob in pairs(mobsFolder:GetChildren()) do
                if mob and mob:FindFirstChild("HumanoidRootPart") and isMobAlive(mob) then
                    local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                    
                    if distance <= AUTO_FARM_RANGE then
                        mobFound = true
                        
                        local targetCFrame = CFrame.new(
                            mob.HumanoidRootPart.Position + Vector3.new(0, HEIGHT_OFFSET, 0)
                        )
                        
                        local tween = TweenService:Create(
                            humanoidRootPart,
                            TweenInfo.new(0.5, Enum.EasingStyle.Linear),
                            {CFrame = targetCFrame}
                        )
                        
                        tween:Play()
                        tween.Completed:Wait()
                        
                        -- Impede o movimento forçado do personagem
                        humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                        humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        
                        multiDamageAllMobs()  -- Aplica dano a todos os mobs
                        break
                    end
                end
            end
            
            if not mobFound then
                wait(5)  -- Intervalo maior quando não encontrar mobs
            else
                wait(0.1)  -- Intervalo pequeno quando encontrar mobs
            end
        end
    end)
end

-- Função que ativa a Kill Aura
local function runKillAura()
    spawn(function()
        while KillAuraEnabled do
            local character = game.Players.LocalPlayer.Character
            if not character then continue end
            
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if not humanoidRootPart then continue end
            
            local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")
            
            for _, mob in pairs(mobsFolder:GetChildren()) do
                if mob and mob:FindFirstChild("Humanoid") and isMobAlive(mob) then
                    -- Calcular a distância entre o personagem e o mob
                    local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                    
                    -- Verificar se o mob está dentro do alcance da Kill Aura
                    if distance <= KILL_AURA_RANGE then
                        -- Aplicar dano no mob
                        local args = {
                            [1] = mob,
                            [2] = DAMAGE_AMOUNT  -- Dano que será aplicado
                        }
                        
                        -- Verificar se o RemoteEvent está disponível e então aplicar o dano
                        local damageRemote = game:GetService("ReplicatedStorage").Universe.Network.Remotes.DamageFire
                        if damageRemote then
                            damageRemote:FireServer(unpack(args))
                        else
                            warn("Remote 'DamageFire' não encontrado!")
                        end
                    end
                end
            end
            -- Aguarda antes de verificar novamente
            wait(0.1)
        end
    end)
end

-- Criando a interface do Rayfield
local Window = Rayfield:CreateWindow({
    Name = "HUBeyond - Pixel Slayer ⚔️",
    LoadingTitle = "HUBeyond",
    LoadingSubtitle = "by zBeyond",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "FarmConfig",
        FileName = "Config"
    }
})

local MainTab = Window:CreateTab("Principal", 4483362458)

-- Slider para ajuste de altura
MainTab:CreateSlider({
    Name = "Deslocamento de Altura",
    Range = {5, 30},
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = 15,
    Flag = "HeightOffset",
    Callback = function(Value)
        HEIGHT_OFFSET = Value
    end,
    ShowValue = false  -- Desativa as notificações de alteração
})

-- Toggling de AutoFarm
MainTab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        AutoFarmEnabled = Value
        if Value then
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = true
                end
            end
            AutoFarm()  -- Função de AutoFarm
        else
            -- Desativa o PlatformStand quando AutoFarm for desativado
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end
    end
})

-- Toggling de Kill Aura
MainTab:CreateToggle({
    Name = "Kill Aura",
    CurrentValue = false,
    Flag = "KillAuraToggle",
    Callback = function(Value)
        KillAuraEnabled = Value
        if Value then
            runKillAura()  -- Função de KillAura
        end
    end
})

-- Toggling de AutoStats
MainTab:CreateToggle({
    Name = "Auto Stats",
    CurrentValue = false,
    Flag = "AutoStatsToggle",
    Callback = function(Value)
        AutoStatsEnabled = Value
        if Value then
            runAutoStats()  -- Função de AutoStats
        end
    end
})

-- DropDown de seleção de Stat
MainTab:CreateDropdown({
    Name = "Selecionar Stat",
    Options = {"Power", "Health", "Critical"},
    CurrentOption = "Power",
    Flag = "StatSelectDropdown",
    Callback = function(Option)
        SelectedStat = Option
    end
})

-- Toggling de AutoRebirth
MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirthToggle",
    Callback = function(Value)
        AutoRebirthEnabled = Value
        if Value then
            runAutoRebirth()  -- Função de AutoRebirth
        end
    end
})

-- Exibe notificações usando Rayfield
Rayfield:Notify({
    Title = "HUBeyond - Pixel Slayer ⚔️",
    Content = "Feito por zBeyond",
    Duration = 7
})

Rayfield:Notify({
    Title = "Pixel Slayer",
    Content = "Jogue e se divirta no mundo de Pixel Slayer!",
    Duration = 7
})

Rayfield:Notify({
    Title = "Agradecimento",
    Content = "Obrigado por usar o HUBeyond!",
    Duration = 7
})

-- Hotkey para abrir/fechar o menu (F6)
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F6 then
        Window:Toggle()  -- Alterna a visibilidade do menu
    end
end)
